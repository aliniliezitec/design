// *************************************************
// Ladda
:host ::ng-deep {
  @import "node_modules/ladda/dist/ladda-themeless.min";
}

:host ::ng-deep .ladda-button[data-style=contract-overlay][data-loading] {
  box-shadow: 0px 0px 0px 2000px rgba(0, 0, 0, 0.8) !important;
}

:host ::ng-deep .ladda-button[data-style="contract"],
:host ::ng-deep .ladda-button[data-style="contract-overlay"] {
  width: auto;
}


// *************************************************
// Button variants, we need this custom changes
@mixin button-variant($background, $border, $hover-background: lighten($background, 7.5), $hover-border: darken($border, 10%), $active-background: darken($background, 10%), $active-border: darken($border, 12.5%)) {
  color: color-yiq($background);
  @include gradient-bg($background);
  border-color: $border;
  @include box-shadow($btn-box-shadow);

  @include hover() {
    color: color-yiq($hover-background);
    @include gradient-bg($hover-background);
    border-color: $hover-border;
  }

  &:focus,
  &.focus {
    color: color-yiq($hover-background);
    @include gradient-bg($hover-background);
    border-color: $hover-border;

    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow: $btn-box-shadow, 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
    }

    @else {
      box-shadow: 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
    }
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    color: color-yiq($background);
    background-color: $background;
    border-color: $border;

    // Remove CSS gradients if they're enabled
    @if $enable-gradients {
      background-image: none;
    }
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show>&.dropdown-toggle {
    color: color-yiq($active-background);
    background-color: $active-background;

    @if $enable-gradients {
      background-image: none; // Remove the gradient for the pressed/active state
    }

    border-color: $active-border;

    &:focus {

      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows and $btn-active-box-shadow !=none {
        box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
      }

      @else {
        box-shadow: 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
      }
    }
  }
}

//
// Alternate buttons
//

@each $color,
$value in $theme-colors {
  .btn-#{$color} {
    @include button-variant($value, $value);
  }
}

// *************************************************
// XL button
.btn-xl {
  padding: pixelToRem(15px) pixelToRem(20px);
  font-size: 1.2rem;
  font-weight: $font-weight-bold;
  border-radius: pixelToRem(7px);
}

// *************************************************
// Close button for modals
.close {
  &:focus {
    outline: none;
  }
}

// *************************************************
// btn text only
.btn-text-only {
  color: var(--primary);
  background-color: transparent;
  border-color: transparent;
  font-weight: $font-weight-semibold;

  &:hover {
    color: var(--primary);
    background-color: var(--primary-opacity);
  }

  &.focus,
  &:focus {
    box-shadow: none;
    border-color: transparent;
    outline: none;
  }

  &.disabled,
  &:disabled {
    color: var(--text-6);
    background-color: transparent;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show>&.dropdown-toggle {
    background-color: #a0a5ff;
  }

  &:not(:disabled):not(.disabled):active:focus,
  &:not(:disabled):not(.disabled).active:focus,
  .show>&.dropdown-toggle:focus {
    box-shadow: 0 0 0 0.2rem #a0a5ff;
  }
}

// *************************************************
// Custom button-outline no bg color on hover
@mixin button-outline-only-variant($color, $color-hover: color-yiq($color), $active-background: $color, $active-border: $color) {
  color: $color;
  border-color: $color;
  //   @include hover() {
  //     color: $color-hover;
  //     background-color: $active-background;
  //     border-color: $active-border;
  //   }

  &:focus,
  &.focus {
    box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);
  }

  &.disabled,
  &:disabled {
    color: $color;
    background-color: transparent;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show>&.dropdown-toggle {
    color: color-yiq($active-background);
    background-color: $active-background;
    border-color: $active-border;

    &:focus {

      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows and $btn-active-box-shadow !=none {
        box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($color, .5);
      }

      @else {
        box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);
      }
    }
  }
}

// Alternate custom buttons
@each $color,
$value in $theme-colors {
  .btn-outline-only-#{$color} {
    @include button-outline-only-variant($value);
  }
}

// *************************************************
// Custom button simple
@mixin button-simple-variant($color, $color-hover: color-yiq($color), $active-background: $color, $active-border: $color) {
  color: $color;
  border-color: transparent;
  background-color: transparent;

  @include hover() {
    color: $color;
    background-color: rgba($active-background, .2);
    box-shadow: 0 1px 3px 0 var(--text-7);
  }

  &:focus,
  &.focus {
    box-shadow: 0 0 0 $btn-focus-width rgba($color, .4);
  }

  &.disabled,
  &:disabled {
    color: $color;
    background-color: transparent;
    box-shadow: 0 3px 3px 1px var(--text-7);
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show>&.dropdown-toggle {
    color: $color;
    background-color: rgba($active-background, .5);

    &:focus {

      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows and $btn-active-box-shadow !=none {
        box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($color, .5);
      }

      @else {
        box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);
      }
    }
  }
}

// Alternate custom buttons
@each $color,
$value in $theme-colors {
  .btn-simple-#{$color} {
    @include button-simple-variant($value);
  }
}


// *************************************************
// btn flip for condensed/relaxed
.btn-flip {
  min-width: 60px;
  color: var(--text-primary-light);
  padding: 4px 7px;
  font-size: pixelToRem(10px);
  background-color: var(--white);
  box-shadow: 0 1px 3px 0 var(--text-7);
}

.btn-flip.flipped {
  color: var(--white);
  background-color: var(--text-primary-light);
}

.btn-flip.disabled,
.btn-flip:disabled {
  color: #fff;
  background-color: var(--text-6);
  border-color: var(--text-6);
}


// *************************************************
// Buttons
.btn {
  text-transform: uppercase;
  transition: all .2s ease-in-out;
}

// btn transition
.nao-btn-transition:hover {
  box-shadow: 0 0.5rem 0.5rem -0.4rem var(--border-lightest);
  transform: translateY(-0.1rem);
}

.nao-btn-transition:disabled {
  box-shadow: 0 0.5rem 0.5rem -0.4rem var(--border-lightest);
  transform: none;
}

.nao-btn-transition:focus,
.nao-btn-transition.focus {
  box-shadow: 0 0.5rem 0.5rem -0.4rem var(--border-lightest);
  transform: translateY(-0.1rem);
}



// btn without box-shadow
.btn-without-box-shadow {
  &:focus {
    box-shadow: none;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active {
    box-shadow: none;

    &:focus {
      box-shadow: none;
    }
  }
}

// *************************************************
// Fix for centering butons vertically, add min-width
.btn {
  padding-top: pixelToRem(11px);
  padding-bottom: pixelToRem(9px);
  line-height: 1;
  min-width: 80px;
}

.btn-lg {
  padding-top: pixelToRem(13px);
  padding-bottom: pixelToRem(12px);
  min-width: 110px;
}

.btn-xl {
  padding-top: pixelToRem(21px);
  padding-bottom: pixelToRem(18px);
  min-width: 150px;
}

.btn-no-min-width {
  min-width: unset !important;
}

.btn-sm {
  padding: pixelToRem(6px) pixelToRem(5px);
  min-width: 60px;
}


//todo: add to the documentation
.nao-icon-rotate {
  display: inline-block;
  transition: ease-in-out .2s;
}
